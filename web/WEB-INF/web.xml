<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" 
    xmlns="http://java.sun.com/xml/ns/javaee" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
	<!-- icon -->

	<!-- display-name -->
	<display-name>dgxtos</display-name>

	<!-- description -->

	<!-- context-param -->
	<!-- Spring -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:application-context.xml</param-value>
	</context-param>

	<!-- filter -->
	<!-- 使用Spring中的过滤器解决在请求和应答中的中文乱码问题 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>

	<!-- filter-mapping -->
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- listener -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 在整合spring容器时使用ContextLoaderListener,它实现了ServletContextListener监听器接口,ServletContextListener 
		只负责监听web容器启动和关闭的事件.而RequestContextListener实现ServletRequestListener监听器接口,该监听器监听HTTP请求事件,web服务器接收的每一次请求都会通知该监听器. 
		spring容器启动和关闭操作由web容器的启动和关闭事件触发,但如果spring容器中的Bean需要request,session,globalsession 
		作用域的支持,spring容器本身就必须获得web容器的HTTP请求事件,以HTTP请求的事件"驱动"Bean作用域的控制逻辑.例如定义某个Bean的作用域为request,<bean 
		name="car" class="com.baobaotao.scope.Car" scope="request"/> 这样,每次HTTP请求调用到car 
		Bean时,spring容器创建一个新的Car Bean,请求处理完毕后,销毁这个Bean. -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	<!-- Spring刷新Interceptor防止内存泄漏 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>


	<!-- servlet -->
	<!-- Spring mvc -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:dispatcher-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- servlet-mapping -->
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.htm</url-pattern>
	</servlet-mapping>

	<!-- session-config -->
	<session-config>
		<session-timeout>600</session-timeout>
	</session-config>

	<!-- mime-mapping -->

	<!-- welcom-file-list -->
	<welcome-file-list>
		<welcome-file>index.htm</welcome-file>
	</welcome-file-list>

	<!-- error-page -->
	<error-page>
		<error-code>404</error-code>
		<location>/error/404.htm</location>
	</error-page>
	<!-- jsp-config -->
	<!-- 自定义jsp标签 -->
	<jsp-config>
		<jsp-property-group>
			<description>使每个jsp页面都不用显式的引用jstl标记</description>
			<url-pattern>*.jsp</url-pattern>
			<include-prelude>/WEB-INF/includes/lib.jspf</include-prelude>
		</jsp-property-group>
	</jsp-config>

	<!-- security-constraint -->
	<!-- login-config -->
	<!-- security-role -->
</web-app>